structure BuiltinFnc =
struct
  (* 1引数組み込み関数 *)
  val biSimpleFncStr = [
      "FIN",       (* p *) (* pow x -> pow (pow x) *)
      "FIN1",      (* c *) (* pow x -> pow (pow x) *)
      "POW",       (* p *) (* pow x -> pow (pow x) *)
      "POW1",      (* c *) (* pow x -> pow (pow x) *)
      "btree",     (* t *) (* pow x -> pow (pow (pair (pow (pair (i, i)), x))) *)
      "card",      (* p *) (* pow x -> i *)
      "ceiling",   (* p *) (* r -> i *)
      "closure",   (* p *) (* pow (pair (x, x)) -> pow (pair (x, x)) *)
      "closure1",  (* p *) (* pow (pair (x, x)) -> pow (pair (x, x)) *)
      "conc",      (* p *) (* pow (pair (i, pow (pair (i, x)))) -> pow (pair (i, x)) *)
      "dom",       (* p *) (* pow (pair (x, y)) -> pow x *)
      "first",     (* c *) (* pow (pair (i, x)) -> x *)
      "floor",     (* p *) (* r -> i *)
      "fnc",       (* p *) (* pow (pair (x, y)) -> pow (pair (x, pow y)) *)
      "front",     (* c *) (* pow (pair (i, x)) -> pow (pair (i, x)) *)
      "id",        (* c *) (* pow x -> pow (pair (x, x)) *)
      "infix",     (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (i, x)) *)
      "inter",     (* c *) (* pow (pow x) -> pow x *)
      "iseq",      (* c *) (* pow x -> pow (pow (pair (i, x))) *)
      "iseq1",     (* p *) (* pow x -> pow (pow (pair (i, x))) *)
      "last",      (* c *) (* pow (pair (i, x)) -> x *)
      "left",      (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (pow (pair (i, i)), x)) *)
      "max",       (* p *) (* pow x -> x *)
      "min",       (* p *) (* pow x -> x *)
      "mirror",    (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (pow (pair (i, i)), x)) *)
      "perm",      (* p *) (* pow x -> pow (pow (pair (i, x))) *)
      "postfix",   (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (i, x)) *)
      "pred",      (* c *) (* i -> i *)
      "prefix",    (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (i, x)) *)
      "ran",       (* c *) (* pow (pair (x, y)) -> pow y *)
      "real",      (* p *) (* i -> r *)
      "rel",       (* p *) (* pow (pair (x, pow y)) -> pow (pair (x, y)) *)
      "rev",       (* p *) (* pow (pair (i, x)) -> pow (pair (i, x)) *)
      "right",     (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (pow (pair (i, i)), x)) *)
      "seq",       (* p *) (* pow x -> pow (pow (pair (i, x))) *)
      "seq1",      (* p *) (* pow x -> pow (pow (pair (i, x))) *)
      "size",      (* c *) (* pow (pair (i, x)) -> i *)
      "sizet",     (* t *) (* pow (pair (pow (pair (i, i)), x)) -> i *)
      "sons",      (* t *) (* pow (pair (pow (pair (i, i)), x)) -> pow (pair (i, pow (pair (pow (pair (i, i)), x)))) *)
      "succ",      (* c *) (* i -> i *)
      "tail",      (* c *) (* pow (pair (i, x)) -> pow (pair (i, x)) *)
      "top",       (* t *) (* pow (pair (pow (pair (i, i)), x)) -> x *)
      "tree",      (* t *) (* pow x -> pow (pow (pair (pow (pair (i, i)), x))) *)
      "union",     (* c *) (* pow (pow x) -> pow x *)
      "bool",      (* p *) (* bp->b *)
      "not"        (* p *) (* p->p *)
    ]

  (* 2引数組み込み関数 *)
  val bi2FncStr = [
      "arity",     (* e, e *) (* t *) (* pow (pair (pow (pair (i, i)), x)) pow (pair (i, i)) -> i *)
      "const",     (* e, e *) (* t *) (* x pow (pair (i, pow (pair (pow (pair (i, i)), x)))) -> pow (pair (pow (pair (i, i)), x)) *) 
      "father",    (* e, e *) (* t *) (* pow (pair (pow (pair (i, i)), x)) pow (pair (i, i)) -> pow (pair (i, i)) *)
      "iterate",   (* e, e *) (* p *) (* pow (pair (x, x)) i -> pow (pair (x, x)) *)
      "prj1",      (* e, e *) (* p *) (* pow x pow y -> pow (pair (pair (x, y), x)) *)
      "prj2",      (* e, e *) (* p *) (* pow x pow y -> pow (pair (pair (x, y), y)) *)
      "rank",      (* e, e *) (* t *) (* pow (pair (pow (pair (i, i)), x)) pow (pair (i, i)) -> i *)
      "subtree"    (* e, e *) (* t *) (* pow (pair (pow (pair (i, i)), x)) pow (pair (i, i)) -> pow (pair (pow (pair (i, i)), x)) *)
    ]

(* bin(), rec(), son(), struct() はParserで個別に対応 *)
end
